// Generated by CoffeeScript 1.6.2
(function() {
  var Call, EventEmitter, shims,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  shims = require('./shims');

  EventEmitter = require('emitter');

  Call = (function(_super) {
    __extends(Call, _super);

    function Call(parent, user, isCaller) {
      var _this = this;

      this.parent = parent;
      this.user = user;
      this.isCaller = isCaller;
      this.pc = this.createConnection();
      this.vein = this.parent.vein;
      if (this.isCaller) {
        this.vein.ready(function() {
          return _this.vein.offer(_this.user, function(err) {
            if (err != null) {
              return _this.emit('error', err);
            }
            return _this.emit("calling");
          });
        });
      }
      this.parent.on("answer." + this.user, function(accepted) {
        if (!accepted) {
          return _this.emit("rejected");
        }
        _this.startTime = new Date;
        _this.emit("answered");
        return _this.initSDP();
      });
      this.parent.on("candidate." + this.user, function(candidate) {
        return _this.pc.addIceCandidate(new shims.IceCandidate(candidate));
      });
      this.parent.on("sdp." + this.user, function(desc) {
        var err, succ;

        desc.sdp = shims.processSDPIn(desc.sdp);
        err = function(e) {
          throw e;
        };
        succ = function() {
          if (!_this.isCaller) {
            _this.initSDP();
          }
          return _this.emit("sdp");
        };
        return _this.pc.setRemoteDescription(new shims.SessionDescription(desc), succ, err);
      });
      this.parent.on("hangup." + this.user, function() {
        return _this.emit("hangup");
      });
      this.parent.on("chat." + this.user, function(msg) {
        return _this.emit("chat", msg);
      });
    }

    Call.prototype.createConnection = function() {
      var pc,
        _this = this;

      pc = new shims.PeerConnection(shims.PeerConnConfig, shims.constraints);
      pc.onconnecting = function() {
        _this.emit('connecting');
      };
      pc.onopen = function() {
        _this.emit('connected');
      };
      pc.onicecandidate = function(evt) {
        if (evt.candidate) {
          _this.parent.vein.ready(function() {
            return _this.parent.vein.candidate(_this.user, evt.candidate);
          });
        }
      };
      pc.onaddstream = function(evt) {
        _this.remoteStream = evt.stream;
        _this._ready = true;
        _this.emit("ready", _this.remoteStream);
      };
      pc.onremovestream = function(evt) {
        console.log("removestream", evt);
      };
      return pc;
    };

    Call.prototype.addStream = function(s) {
      this.localStream = s;
      this.pc.addStream(s);
      return this;
    };

    Call.prototype.ready = function(fn) {
      if (this._ready) {
        fn(this.remoteStream);
      } else {
        this.once('ready', fn);
      }
      return this;
    };

    Call.prototype.duration = function() {
      var e, s;

      if (this.endTime != null) {
        s = this.endTime.getTime();
      }
      if (s == null) {
        s = Date.now();
      }
      e = this.startTime.getTime();
      return (s - e) / 1000;
    };

    Call.prototype.chat = function(msg) {
      this.parent.chat(this.user, msg);
      return this;
    };

    Call.prototype.answer = function() {
      var _this = this;

      this.startTime = new Date;
      this.parent.vein.ready(function() {
        return _this.parent.vein.answer(_this.user, true);
      });
      return this;
    };

    Call.prototype.decline = function() {
      var _this = this;

      this.parent.vein.ready(function() {
        return _this.parent.vein.answer(_this.user, false);
      });
      return this;
    };

    Call.prototype.end = function() {
      var _this = this;

      this.endTime = new Date;
      try {
        this.pc.close();
      } catch (_error) {}
      this.parent.vein.ready(function() {
        return _this.parent.vein.hangup(_this.user);
      });
      this.emit("hangup");
      return this;
    };

    Call.prototype.initSDP = function() {
      var done, err,
        _this = this;

      done = function(desc) {
        desc.sdp = shims.processSDPOut(desc.sdp);
        _this.pc.setLocalDescription(desc);
        return _this.parent.vein.ready(function() {
          return _this.parent.vein.sdp(_this.user, desc);
        });
      };
      err = function(e) {
        throw e;
      };
      if (this.isCaller) {
        return this.pc.createOffer(done, err, shims.constraints);
      }
      if (this.pc.remoteDescription) {
        return this.pc.createAnswer(done, err, shims.constraints);
      }
      return this.once("sdp", function() {
        return _this.pc.createAnswer(done, err);
      });
    };

    return Call;

  })(EventEmitter);

  module.exports = Call;

}).call(this);
