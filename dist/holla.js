// Generated by CoffeeScript 1.6.2
(function() {
  var Call, Client, Emitter, Vein, holla, recorder, shims,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Call = require('./Call');

  shims = require('./shims');

  Vein = require('vein');

  recorder = require('recorder');

  Emitter = require('emitter');

  Client = (function(_super) {
    __extends(Client, _super);

    function Client(options) {
      var _base, _base1, _base2, _ref, _ref1, _ref2,
        _this = this;

      this.options = options != null ? options : {};
      if ((_ref = (_base = this.options).namespace) == null) {
        _base.namespace = "holla";
      }
      if ((_ref1 = (_base1 = this.options).debug) == null) {
        _base1.debug = false;
      }
      if ((_ref2 = (_base2 = this.options).presence) == null) {
        _base2.presence = true;
      }
      this.vein = Vein.createClient(this.options);
      this.vein.ready(function(services) {
        return console.log(services);
      });
      this.vein.on("invalid", function(socket, msg) {
        return _this.handleMessage(socket, msg);
      });
    }

    Client.prototype.register = function(name, cb) {
      var _this = this;

      return this.vein.ready(function() {
        return _this.vein.register(name, function(err) {
          if (err != null) {
            return cb(err);
          }
          _this.registered = true;
          _this.emit("registered");
          return cb();
        });
      });
    };

    Client.prototype.call = function(user) {
      return new Call(this, user, true);
    };

    Client.prototype.chat = function(user, msg) {
      var _this = this;

      this.vein.ready(function() {
        return _this.vein.chat(user, msg);
      });
      return this;
    };

    Client.prototype.ready = function(fn) {
      if (this.registered) {
        fn();
      } else {
        this.once('registered', fn);
      }
      return this;
    };

    Client.prototype.handleMessage = function(socket, msg) {
      var c;

      if (this.options.debug) {
        console.log(msg);
      }
      switch (msg.type) {
        case "offer":
          c = new Call(this, msg.from, false);
          return this.emit("call", c);
        case "presence":
          this.emit("presence", msg.args);
          return this.emit("presence." + msg.args.name, msg.args.online);
        case "chat":
          this.emit("chat", {
            from: msg.from,
            message: msg.args.message
          });
          return this.emit("chat." + msg.from, msg.args.message);
        case "hangup":
          this.emit("hangup", {
            from: msg.from
          });
          return this.emit("hangup." + msg.from);
        case "answer":
          this.emit("answer", {
            from: msg.from,
            accepted: msg.args.accepted
          });
          return this.emit("answer." + msg.from, msg.args.accepted);
        case "candidate":
          this.emit("candidate", {
            from: msg.from,
            candidate: msg.args.candidate
          });
          return this.emit("candidate." + msg.from, msg.args.candidate);
        case "sdp":
          this.emit("sdp", {
            from: msg.from,
            sdp: msg.args.sdp,
            type: msg.args.type
          });
          return this.emit("sdp." + msg.from, msg.args);
      }
    };

    return Client;

  })(Emitter);

  holla = {
    createClient: function(opt) {
      return new Client(opt);
    },
    Client: Client,
    Call: Call,
    supported: shims.supported,
    config: shims.PeerConnConfig,
    streamToBlob: function(s) {
      return shims.URL.createObjectURL(s);
    },
    pipe: function(stream, el) {
      var uri;

      uri = holla.streamToBlob(stream);
      return shims.attachStream(uri, el);
    },
    record: recorder,
    createStream: function(opt, cb) {
      var err, succ;

      if (shims.getUserMedia == null) {
        return cb("Missing getUserMedia");
      }
      err = cb;
      succ = function(s) {
        return cb(null, s);
      };
      shims.getUserMedia(opt, succ, err);
      return holla;
    },
    createFullStream: function(cb) {
      return holla.createStream({
        video: true,
        audio: true
      }, cb);
    },
    createVideoStream: function(cb) {
      return holla.createStream({
        video: true,
        audio: false
      }, cb);
    },
    createAudioStream: function(cb) {
      return holla.createStream({
        video: false,
        audio: true
      }, cb);
    }
  };

  module.exports = holla;

}).call(this);
